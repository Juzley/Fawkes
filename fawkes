#!/usr/bin/env python3

import os
import sys
import logging
import datetime
from subprocess import call
from mutate import Mutator

_LOG_DIR = 'fawkes-logs'
_LOG_FILENAME = 'run.log'
_INJECT_DIR = 'inject'
_INJECT_DLL = 'inject.so'

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)


if __name__ == '__main__':
    # TODO: Move this stuff to cmdline args
    _BUILD_CMD = 'gcc -o mutate_test example.c test.c'
    _CLEAN_CMD = 'rm -f mutate_test *.o'
    _MUTATE_SRC = 'example.c' 
    _TEST_EXE = 'mutate_test'

    # Set up logging
    logging.basicConfig(level=logging.INFO)

    # Create a directory for this run's logs, first creating the top
    # level log directory if it doesn't exist
    ts = datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
    run_log_dir = _LOG_DIR + '/' + _TEST_EXE + '-' + ts
    try:
        if not os.path.exists(_LOG_DIR):
            os.mkdir(_LOG_DIR)
        os.mkdir(run_log_dir)
    except OSError as e:
        logging.error('Failed to create log diirectory {}: {}'.format(
            run_log_dir, e))
        sys.exit(1)

    # Create a log file for this run
    logfile = logging.FileHandler(run_log_dir + '/' + _LOG_FILENAME)
    logfile.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
    logging.getLogger('').addHandler(logfile)

    # Find the inject lib, build it if it doesn't exist
    print(__file__)
    print(os.path.realpath(__file__))
    fawkes_dir = os.path.dirname(os.path.realpath(__file__))
    inject_dir = fawkes_dir + '/' + _INJECT_DIR
    if not os.path.exists(inject_dir):
        logging.error('Could not find inject DLL directory {}'.format(
            inject_dir))
        sys.exit(1)

    inject_dll = inject_dir + '/' + _INJECT_DLL
    if not os.path.exists(inject_dll):
        with cd(inject_dir):
            ret = sys.call('make')
        if ret != 0 or not os.path.exists(inject_dll):
            logging.error('Failed to build inject DLL')
            sys.exit(1)

    mut = Mutator(_BUILD_CMD, _TEST_EXE, _MUTATE_SRC, inject_dll)
    mut()

    # Clean up
    os.system(_CLEAN_CMD)
    
