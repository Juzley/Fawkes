#!/usr/bin/env python

import os
import sys
import logging
import datetime
import argparse
from subprocess import call
from mutate import Mutator

_LOG_DIR = 'fawkes-logs'
_LOG_FILENAME = 'run.log'
_INJECT_DIR = 'inject'
_INJECT_DLL = 'inject.so'

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--build_cmd',
                        required=True,
                        help='The command to use to build the test',
                        dest='build_cmd')
    parser.add_argument('-c', '--clean_cmd',
                        required=False,
                        help='The command to use to clean the test',
                        dest='clean_cmd')
    parser.add_argument('-s', '--src_file',
                        required=True,
                        help='The source file to mutate',
                        dest='src_file')
    parser.add_argument('-t', '--test_exe',
                        required=True,
                        help='The test executable to run',
                        dest='test_exe')
    parser.add_argument('-e', '--exclude_pattern',
                        action='append',
                        required=False,
                        help='Functions matching this python regex will be' +
                            'ignored',
                        dest='exclude_patterns')
    args = parser.parse_args()

    # Set up logging
    logging.basicConfig(level=logging.INFO)

    # Create a directory for this run's logs, first creating the top
    # level log directory if it doesn't exist
    ts = datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
    run_log_dir = _LOG_DIR + '/' + args.test_exe + '-' + ts
    try:
        if not os.path.exists(_LOG_DIR):
            os.mkdir(_LOG_DIR)
        os.mkdir(run_log_dir)
    except OSError as e:
        logging.error('Failed to create log diirectory {}: {}'.format(
            run_log_dir, e))
        sys.exit(1)

    # Create a log file for this run
    logfile = logging.FileHandler(run_log_dir + '/' + _LOG_FILENAME)
    logfile.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
    logging.getLogger('').addHandler(logfile)

    # Find the inject lib, build it if it doesn't exist
    fawkes_dir = os.path.dirname(os.path.realpath(__file__))
    inject_dir = fawkes_dir + '/' + _INJECT_DIR
    if not os.path.exists(inject_dir):
        logging.error('Could not find inject DLL directory {}'.format(
            inject_dir))
        sys.exit(1)

    inject_dll = inject_dir + '/' + _INJECT_DLL
    if not os.path.exists(inject_dll):
        with cd(inject_dir):
            ret = sys.call('make')
        if ret != 0 or not os.path.exists(inject_dll):
            logging.error('Failed to build inject DLL')
            sys.exit(1)

    mut = Mutator(args.build_cmd, args.test_exe, args.src_file, inject_dll,
                  run_log_dir, args.exclude_patterns)
    mut()

    # Clean up, if a clean command was specified
    if args.clean_cmd is not None:
        os.system(args.clean_cmd)
    
